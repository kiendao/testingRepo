{
  "name": "grunt-dev-update",
  "version": "1.3.0",
  "description": "Automate the updating of your package.json packages with a grunt task",
  "repository": {
    "type": "git",
    "url": "git://github.com/pgilad/grunt-dev-update"
  },
  "license": "MIT",
  "author": {
    "name": "Gilad Peleg",
    "email": "giladp007@gmail.com",
    "url": "http://giladpeleg.com"
  },
  "files": [
    "tasks"
  ],
  "engines": {
    "node": ">= 0.10.25"
  },
  "scripts": {
    "test": "grunt test"
  },
  "keywords": [
    "gruntplugin",
    "devDependencies",
    "dependencies",
    "install",
    "save-dev",
    "save",
    "automation",
    "updates"
  ],
  "dependencies": {
    "async-each-series": "^0.1.1",
    "findup-sync": "^0.2.1",
    "inquirer": "^0.8.5",
    "lodash": "^3.9.1",
    "npm-package-arg": "^4.0.1",
    "semver": "^4.3.4"
  },
  "devDependencies": {
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-nodeunit": "^0.4.1",
    "jshint-stylish": "^1.0.2",
    "load-grunt-tasks": "^3.2.0"
  },
  "peerDependencies": {
    "grunt": "^0.4.1"
  },
  "readme": "# [grunt](http://gruntjs.com/)-dev-update\n> Update your devDependencies and dependencies automatically with a grunt task\n\n[![NPM Version](http://img.shields.io/npm/v/grunt-dev-update.svg?style=flat)](https://npmjs.org/package/grunt-dev-update)\n[![NPM Downloads](http://img.shields.io/npm/dm/grunt-dev-update.svg?style=flat)](https://npmjs.org/package/grunt-dev-update)\n[![Built with Grunt](http://img.shields.io/badge/BUILT_WITH-GRUNT-orange.svg?style=flat)](http://gruntjs.com/)\n\n## Getting Started\nThis plugin requires Grunt.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before,\nbe sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide,\nas it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\nOnce you're familiar with that process, you may install this plugin with this command:\n\n```bash\nnpm install --save-dev grunt-dev-update\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-dev-update');\n```\n\nThe best way to load tasks is probably using [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks)\n\n```bash\nnpm install --save-dev load-grunt-tasks\n```\n\nAnd then add to your gruntfile.js:\n```js\nrequire('load-grunt-tasks')(grunt);\n```\n\n## The \"devUpdate\" task\n\n#### This plugin allows you to both update your dependencies and devDependencies with an automated task.\n\n1. See outdated packages\n2. Choose whether to just get notified, update them with a prompt, or automatically update them.\n3. Determine whether to stay with semver rules when updating, or to update to latest version.\n4. Update either or both your devDependencies and dependencies\n\n*Q: Why not use `npm update` or `npm install`?*\n\n**A: First, npm update doesn't work on dev dependencies. Second, npm update stays inside your semver matching in your package.json,\nthirdly - npm isn't automated like your grunt tasks.**\n\n### Overview\nIn your project's Gruntfile, add a task config named `devUpdate` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n    devUpdate: {\n        main: {\n            options: {\n                //task options go here\n            }\n        }\n    }\n})\n```\n\n### Options\n\n#### options.reportUpdated\nType: `Boolean`\nDefault value: `false`\n\nWhether to report an already updated package\n\n#### options.updateType\nType: `String`\nDefault value: `report`\n\nHow devUpdate should handle the outdated packages. Valid options:\n\n* `report` - Just report that the package is outdated.\n* `prompt` - Prompt user to confirm update of every package\n* `force` - Automatically force the update for the outdated packages.\n* `fail` - Fail task if an outdated package was found.\n\n#### options.packages\nType: `Object`\nDefault value: `{devDependencies: true}`\n\nWhat kind of packages should be checked. Valid options:\n\n* `dependencies` - Specify true to check **production dependencies**.\n\n    > Outdated **dependencies** are installed using the `--save` option.\n\n* `devDependencies` - Specify true to check **development dependencies**. This is **true** by default.\n\n    > Outdated **devDependencies** are installed using the `--save-dev` option.\n\n#### options.semver\nType: `Boolean`\nDefault value: `true`\n\n`true` - Packages will be updated with `npm update` and will be installed up to your allowed version in\nyour `package.json`. Your allowed version is determined using [semver](http://semver.org).\n\n`false` - Packages will be updated to the latest version there is, regardless of your `package.json` specifications.\n\n**Warning** - this could break packages and only use this option if you're sure of what you're doing.\n\n#### options.packageJson\nType: `null|Object|String`\nDefault value: `null`\n\nThis option allow you to manully configure the path of your **package.json**. Valid options:\n\n* `null` - This will use `matchdep` own logic for finding your package.json (using `findup` to find\nnearest package.json). This is the recommended and default option.\n* `String` - specify a relative path from your **process.cwd()** to find your package.json.\n* `Object` - pass in an object representing your package.json\n\nFor better understanding the `String` and `Object` option, please see [matchdep config](https://github.com/tkellen/node-matchdep#config).\n\n#### options.reportOnlyPkgs\nType: `Array`\nDefault value: `[]`\n\nSpecify packages that will be checked for newer version but only reported if outdated.\n\nThis is useful if you are aware of packages that will be outdated, but don't want to update them.\n\n### Usage Examples\n\n#### Default Options\nExample usage with all options specified with defaults:\n\n```js\ngrunt.initConfig({\n    devUpdate: {\n        main: {\n            options: {\n                updateType: 'report', //just report outdated packages\n                reportUpdated: false, //don't report up-to-date packages\n                semver: true, //stay within semver when updating\n                packages: {\n                    devDependencies: true, //only check for devDependencies\n                    dependencies: false\n                },\n                packageJson: null, //use matchdep default findup to locate package.json\n                reportOnlyPkgs: [] //use updateType action on all packages\n            }\n        }\n    }\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## License\n\nMIT @[Gilad Peleg](http://giladpeleg.com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pgilad/grunt-dev-update/issues"
  },
  "homepage": "https://github.com/pgilad/grunt-dev-update",
  "_id": "grunt-dev-update@1.3.0",
  "dist": {
    "shasum": "26354f21f518184006d2e6193b39b5e97a2cdba8"
  },
  "_from": "grunt-dev-update@^1.1.0",
  "_resolved": "https://registry.npmjs.org/grunt-dev-update/-/grunt-dev-update-1.3.0.tgz"
}
